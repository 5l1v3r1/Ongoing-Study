diff --git a/CMakeLists.txt b/CMakeLists.txt
index f6968ed..2dfd933 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -44,7 +44,6 @@ endif()
 # Options
 if(OVERRIDE MATCHES "ON")
   message(STATUS "Override standard malloc (OVERRIDE=ON)")
-  list(APPEND mi_defines MI_MALLOC_OVERRIDE)
   if(APPLE)
     if(INTERPOSE MATCHES "ON")
       # use interpose on MacOSX
@@ -108,36 +107,57 @@ endif()
 
 
 # shared library
+if(BUILD_SHARED_LIBS)
 add_library(mimalloc SHARED ${mi_sources})
 set_target_properties(mimalloc PROPERTIES VERSION ${mi_version} NO_SONAME "YES" OUTPUT_NAME ${mi_basename} )
 target_compile_definitions(mimalloc PRIVATE ${mi_defines} MI_SHARED_LIB MI_SHARED_LIB_EXPORT)
+target_compile_definitions(mimalloc PRIVATE $<$<BOOL:${OVERRIDE}>:MI_MALLOC_OVERRIDE>)
 target_compile_options(mimalloc PRIVATE ${mi_cflags})
 target_include_directories(mimalloc PRIVATE include PUBLIC $<INSTALL_INTERFACE:${mi_install_dir}/include>)
 target_link_libraries(mimalloc PUBLIC ${mi_libraries})
+endif()
 
+if(NOT BUILD_SHARED_LIBS)
 # static library
 add_library(mimalloc-static STATIC ${mi_sources})
-set_target_properties(mimalloc-static PROPERTIES OUTPUT_NAME ${mi_basename})
+if(WIN32)
+  # When building both static and shared libraries on Windows,
+  # a static library should use a different output name to 
+  # avoid the conflict with the import library of a shared one.
+  string(REPLACE "mimalloc" "mimalloc-static" mi_output_name ${mi_basename})
+  set_target_properties(mimalloc-static PROPERTIES OUTPUT_NAME ${mi_output_name})
+else()
+  set_target_properties(mimalloc-static PROPERTIES OUTPUT_NAME ${mi_basename})
+endif()
 target_compile_definitions(mimalloc-static PRIVATE ${mi_defines} MI_STATIC_LIB)
+if(NOT WIN32)
+  # It is only possible to override malloc on Windows when building as a DLL.
+  # (src/alloc-override.c)
+  target_compile_definitions(mimalloc-static PRIVATE $<$<BOOL:${OVERRIDE}>:MI_MALLOC_OVERRIDE>)
+endif()
 target_compile_options(mimalloc-static PRIVATE ${mi_cflags})
 target_include_directories(mimalloc-static PRIVATE include PUBLIC $<INSTALL_INTERFACE:${mi_install_dir}/include>)
 target_link_libraries(mimalloc-static PUBLIC ${mi_libraries})
+endif()
 
+if(BUILD_SHARED_LIBS)
 # install static and shared library, and the include files
-install(TARGETS mimalloc EXPORT mimalloc DESTINATION ${mi_install_dir} LIBRARY NAMELINK_SKIP)
-install(TARGETS mimalloc-static EXPORT mimalloc DESTINATION ${mi_install_dir})
+install(TARGETS mimalloc EXPORT mimalloc ARCHIVE DESTINATION lib RUNTIME DESTINATION bin LIBRARY DESTINATION lib NAMELINK_SKIP)
+else()
+install(TARGETS mimalloc-static EXPORT mimalloc DESTINATION lib)
+endif()
 install(FILES include/mimalloc.h DESTINATION ${mi_install_dir}/include)
 install(FILES cmake/mimalloc-config.cmake DESTINATION ${mi_install_dir}/cmake)
 install(FILES cmake/mimalloc-config-version.cmake DESTINATION ${mi_install_dir}/cmake)
 install(EXPORT mimalloc DESTINATION ${mi_install_dir}/cmake)
-install(FILES "$<TARGET_FILE:mimalloc>" DESTINATION lib)  # duplicate the .so in the lib directory (unversioned)
 
 # single object file for more predictable static overriding
 add_library(mimalloc-obj OBJECT src/static.c)
-target_compile_definitions(mimalloc-obj PRIVATE ${mi_defines} MI_MALLOC_OVERRIDE)
+target_compile_definitions(mimalloc-obj PRIVATE ${mi_defines})
+if(NOT WIN32)
+  # It is only possible to override malloc on Windows when building as a DLL.
+  # (src/alloc-override.c)
+  target_compile_definitions(mimalloc-obj PRIVATE $<$<BOOL:${OVERRIDE}>:MI_MALLOC_OVERRIDE>)
+endif()
 target_compile_options(mimalloc-obj PRIVATE ${mi_cflags})
 target_include_directories(mimalloc-obj PRIVATE include PUBLIC $<INSTALL_INTERFACE:include>)
-
-install(FILES ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/mimalloc-obj.dir/src/static.c${CMAKE_C_OUTPUT_EXTENSION}
-        DESTINATION ${mi_install_dir}
-        RENAME ${mi_basename}${CMAKE_C_OUTPUT_EXTENSION} )
